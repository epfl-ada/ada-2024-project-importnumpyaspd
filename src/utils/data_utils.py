# (Docstrings has been generated by chatgpt)
import pandas as pd


def get_films(df):
    """
    Extracts a list of movie IDs from a given dataframe.

    Parameters:
    df (pd.DataFrame): A dataframe containing a column named 'Freebase_movie_ID'.

    Returns:
    list: A list of movie IDs extracted from the 'Freebase_movie_ID' column.
    """
    list_film = df.Freebase_movie_ID.tolist()
    return list_film

def create_Director_to_film_list(Movie):
    """
    Creates a dataframe mapping directors to the list of movies they directed.

    The function processes the Movie dataset to generate a mapping where each 
    row contains a director ID and a list of movie IDs they directed.

    Returns:
    pd.DataFrame: A dataframe with two columns:
                  - 'IMDb_director_ID': Director IDs
                  - 'Freebase_movie_ID': List of movies directed by each director.
    """
    Movie_bis = Movie.copy()
    Movie_bis['IMDb_director_ID'] = Movie_bis['IMDb_director_ID'].astype(str).str.split(',')
    Director_Movie_expanded = Movie_bis.explode('IMDb_director_ID')
    Director_film_list = pd.DataFrame(Director_Movie_expanded.groupby(by='IMDb_director_ID').apply(get_films, include_groups=False)).reset_index()
    Director_film_list.columns = ['IMDb_director_ID', 'Freebase_movie_ID']
    Director_film_list = Director_film_list.iloc[2:]
    return Director_film_list

def create_Film_to_Director_list(Movie):
    """
    Creates a dataframe mapping films to the directors who directed them.

    The function processes the Movie dataset to generate a mapping where each 
    row contains a movie ID and a list of director IDs.

    Returns:
    pd.DataFrame: A dataframe with two columns:
                  - 'Freebase_movie_ID': Movie IDs
                  - 'IMDb_director_ID': List of director IDs for each movie.
    """
    Movie_bis = Movie.copy()
    Movie_bis['IMDb_director_ID'] = Movie_bis['IMDb_director_ID'].astype(str).str.split(',')
    Film_director_list = pd.DataFrame()
    Film_director_list['Freebase_movie_ID'] = Movie_bis['Freebase_movie_ID']
    Film_director_list['IMDb_director_ID'] = Movie_bis['IMDb_director_ID']
    Film_director_list = Film_director_list.reset_index(drop=True)
    return Film_director_list

def create_Actor_to_film_list(Movie):
    """
    Creates a dataframe mapping actors to the list of movies in which they appeared.

    The function uses the CMU character metadata and the Movie dataset to generate 
    a mapping where each row contains an actor ID and a list of movies they acted in.

    Returns:
    pd.DataFrame: A dataframe with two columns:
                  - 'Freebase_actor_ID': Actor IDs
                  - 'Freebase_movie_ID': List of movie IDs for each actor.
    """
    character_column = ['Wikipedia_movie_ID', 'Freebase_movie_ID', 'Movie_release_date', 
                        'Character_name', 'actor_DOB', 'actor_gender', 'actor_height', 
                        'actor_ethnicity', 'actor_name', 'actor_age_atmovierelease', 
                        'freebase_character_actor_map_id', 'freebase_character_id', 'Freebase_actor_ID']
    CMU_character = pd.read_csv("data/CMU/character.metadata.tsv", sep='\t', names=character_column, header=0)
    CMU_character_filtered = CMU_character[CMU_character['Freebase_movie_ID'].isin(Movie['Freebase_movie_ID'])]
    Actor_film_list = pd.DataFrame(CMU_character_filtered.groupby(by='Freebase_actor_ID').apply(get_films, include_groups=False)).reset_index()
    Actor_film_list.columns = ['Freebase_actor_ID', 'Freebase_movie_ID']
    return Actor_film_list

def create_Film_to_actor_list(Movie):
    """
    Creates a dataframe mapping films to the actors who appeared in them.

    The function uses the CMU character metadata and the Movie dataset to generate 
    a mapping where each row contains a movie ID and a list of actor IDs.

    Returns:
    pd.DataFrame: A dataframe with two columns:
                  - 'Freebase_movie_ID': Movie IDs
                  - 'Freebase_actor_ID': List of actor IDs for each movie.
    """
    character_column = ['Wikipedia_movie_ID', 'Freebase_movie_ID', 'Movie_release_date', 
                        'Character_name', 'actor_DOB', 'actor_gender', 'actor_height', 
                        'actor_ethnicity', 'actor_name', 'actor_age_atmovierelease', 
                        'freebase_character_actor_map_id', 'freebase_character_id', 'Freebase_actor_ID']
    CMU_character = pd.read_csv("data/CMU/character.metadata.tsv", sep='\t', names=character_column, header=0)
    CMU_character_filtered = CMU_character[CMU_character['Freebase_movie_ID'].isin(Movie['Freebase_movie_ID'])]
    Film_actor_list = CMU_character_filtered.groupby('Freebase_movie_ID').agg({'Freebase_actor_ID': list}).reset_index()
    return Film_actor_list

def create_Director_profile(Movie):
    """
    Creates a profile for each director, including their name, birth year, death year,
    movies they directed, and their age at the release of each movie.

    The function processes the Movie dataset and splits data to handle multiple 
    directors per movie.

    Returns:
    pd.DataFrame: A dataframe with the following columns:
                  - 'IMDb_director_ID': Director IDs
                  - 'director_name': Director names
                  - 'birthYear_director': Birth years of directors
                  - 'deathYear_director': Death years of directors
                  - 'Freebase_movie_ID': List of movie IDs directed by each director
                  - 'age_at_movie_release': List of ages of the director at the release of each movie.
    """
    Movie_bis = Movie.copy()
    Movie_bis["IMDb_director_ID"] = Movie_bis["IMDb_director_ID"].str.split(",")
    Movie_bis["director_name"] = Movie_bis["Producer name"].str.split(",")
    Movie_bis["birthYear_director"] = Movie_bis["birthYear producer"].str.split(",")
    Movie_bis["deathYear_director"] = Movie_bis["deathYear producer"].str.split(",")
    Movie_exploded = Movie_bis.explode(["IMDb_director_ID", "director_name", "birthYear_director", "deathYear_director"])
    Movie_exploded["birthYear_director"] = pd.to_numeric(Movie_exploded["birthYear_director"], errors="coerce")
    Movie_exploded["Movie_release_date"] = pd.to_numeric(Movie_exploded["Movie_release_date"], errors="coerce")
    Movie_exploded["age_at_movie_release"] = Movie_exploded["Movie_release_date"] - Movie_exploded["birthYear_director"]
    Director_profile = Movie_exploded.groupby("IMDb_director_ID").agg({
        "director_name": "first",
        "birthYear_director": "first",
        "deathYear_director": "first",
        "Freebase_movie_ID": list,
        "age_at_movie_release": list,
    }).reset_index()
    return Director_profile